package main

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gomodule/redigo/redis"
)

var pool = newPool()

func newPool() *redis.Pool {
	return &redis.Pool{
		Dial: func() (redis.Conn, error) {
			c, err := redis.Dial("tcp", ":6379")
			if err != nil {
				panic(err.Error())
			}
			return c, err
		},
	}
}

func encodeJsonResp(w http.ResponseWriter, resp map[string]bool) {
	encoder := json.NewEncoder(w)
	encoder.Encode(resp)
}

func handler(w http.ResponseWriter, req *http.Request) {

	w.Header().Set("Content-Type", "application/json")

	// TODO: Sanitize/Validate URL
	if req.Method == "GET" {

		log.Println("Received GET request")
		resp := map[string]bool{"safe": false}

		// Isolate URL passed in
		url := req.URL.Path[12:]
		if req.URL.RawQuery != "" {
			url += "?" + req.URL.RawQuery
		}

		// Connect to DB
		client := pool.Get()
		defer client.Close()

		// Check if URL exists in DB
		exists, err := client.Do("GET", url)
		if exists == nil {
			resp["safe"] = true
		} else if err != nil {
			log.Println(err)
		}

		// Send reply with JSON body
		encodeJsonResp(w, resp)

	} else if req.Method == "POST" {

		log.Println("Received POST request")
		resp := map[string]bool{"success": true}

		// Isolate URLs passed in
		urlMap := map[string][]string{}
		err := json.NewDecoder(req.Body).Decode(&urlMap)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		// Build MSET (insertion) query
		var pairs []interface{}
		for i := range urlMap["urls"] {
			pairs = append(pairs, urlMap["urls"][i], true)
		}

		// Connect to DB
		client := pool.Get()
		defer client.Close()

		// Insert URLs into the DB
		_, err = client.Do("MSET", pairs...)
		if err != nil {
			resp["success"] = false
			log.Println(err)
		}

		// Send reply with JSON body
		encodeJsonResp(w, resp)

	} else {
		http.Error(w, "Method must be GET or POST. Refer to API docs for more info.", http.StatusMethodNotAllowed)
	}
}

func main() {

	http.HandleFunc("/v1/urlinfo/", handler)
	http.ListenAndServe(":8080", nil)

}
